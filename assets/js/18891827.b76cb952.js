"use strict";(self.webpackChunk_agoralabs_sh_avm_web_provider=self.webpackChunk_agoralabs_sh_avm_web_provider||[]).push([[160],{9804:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>m,contentTitle:()=>p,default:()=>b,frontMatter:()=>h,metadata:()=>g,toc:()=>w});var a=n(7624),i=n(2172),t=n(1552);n(1504);const o="container_xnVI",r="container__outer_UJ5y";var d=n(5456);const l=e=>{let{label:s,maxWidth:n="400px",src:i}=e;return(0,a.jsx)("div",{className:(0,d.c)(o,r),children:(0,a.jsx)("div",{className:o,style:{maxWidth:n},children:(0,a.jsx)("img",{alt:s,"aria-label":s,src:i})})})},c=n.p+"assets/images/simple_message_bus-502c8c318d1b40b73ea9e5bd470c3b2a.png",h={slug:"/"},p="Overview",g={id:"overview",title:"Overview",description:"<TOCInline",source:"@site/docs/overview.mdx",sourceDirName:".",slug:"/",permalink:"/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{slug:"/"},sidebar:"docs",next:{title:"Terminology",permalink:"/terminology"}},m={},w=[{value:"Introduction",id:"introduction",level:2},{value:"How it works",id:"how-it-works",level:2}];function v(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",ul:"ul",...(0,i.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.h1,{id:"overview",children:"Overview"}),"\n","\n","\n","\n","\n",(0,a.jsx)(t.c,{maxHeadingLevel:4,toc:w}),"\n",(0,a.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,a.jsx)(s.p,{children:"The AVM Web Provider is an interface that bridges the gap between clients (e.g. dApps) and providers (e.g. wallets), allowing clients to connect and interact with providers in a standardized way."}),"\n",(0,a.jsx)(s.p,{children:"The AVM Web Provider works towards achieving three main goals:"}),"\n",(0,a.jsxs)(s.ol,{children:["\n",(0,a.jsx)(s.li,{children:"Creating a common interface between clients and providers."}),"\n",(0,a.jsx)(s.li,{children:"Allowing clients to choose what provider to use."}),"\n"]}),"\n",(0,a.jsx)(s.h2,{id:"how-it-works",children:"How it works"}),"\n",(0,a.jsx)(s.p,{children:'Traditionally, web-based providers inject script into a web page\'s document and "hijack" a property on the global object. This can be problematic for a user that may use multiple providers and could lead to provider B overwriting this global property that was already initialized by provider A.'}),"\n",(0,a.jsxs)(s.p,{children:["It is also common for web-based providers to use injected code to use the ",(0,a.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",children:(0,a.jsx)(s.code,{children:"window.postMessage"})})," for  communication to the extension's content scripts. This opens up a client to cross-origin communication; any messages sent to via ",(0,a.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",children:(0,a.jsx)(s.code,{children:"window.postMessage"})})," can be received by a page, and a pop-up that it spawned, or between a page and an iframe embedded within it."]}),"\n",(0,a.jsxs)(s.p,{children:["As of March 2022, the ",(0,a.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel",children:(0,a.jsx)(s.code,{children:"BroadcastChannel"})})," API is fully supported by all major browsers and is a clean and efficient way to broadcast/listen for messages. It provides several advantages over ",(0,a.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",children:(0,a.jsx)(s.code,{children:"window.postMessage"})}),":"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["It provides a higher-level abstraction for communication. It is simpler to use compared to manually injecting scripts and handling ",(0,a.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",children:(0,a.jsx)(s.code,{children:"window.postMessage"})})," events."]}),"\n",(0,a.jsx)(s.li,{children:"It is limited to a named channel and the same origin, meaning only the origin page, the client, and the browsing context (for instance, a web extension's content script) can broadcast/listen to messages."}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["The AVM Web Provider leverages the ",(0,a.jsx)(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel",children:(0,a.jsx)(s.code,{children:"BroadcastChannel"})})," API as a transport layer to deliver messages and allows clients and web-based providers to securely communicate without interfering with other providers."]}),"\n",(0,a.jsx)(s.p,{children:"A client will broadcast a message and the provider(s) will listen for these broadcasted messages and act upon them, responding with another broadcast message that references the original request broadcast."}),"\n",(0,a.jsx)(s.p,{children:"The client will, itself, listen to broadcasted responses from any provider(s). Below is a diagram demonstrating a web extension provider for the flow of data for an enable request."}),"\n",(0,a.jsx)(l,{label:"Diagram of a simple message bus using the BroadcastChannel API",maxWidth:"100%",src:c})]})}function b(e={}){const{wrapper:s}={...(0,i.M)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(v,{...e})}):v(e)}}}]);