"use strict";(self.webpackChunk_agoralabs_sh_avm_web_provider=self.webpackChunk_agoralabs_sh_avm_web_provider||[]).push([[456],{9072:function(e,s,n){n.r(s),n.d(s,{assets:function(){return l},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return d},metadata:function(){return c},toc:function(){return h}});var r=n(7624),i=n(4552),o=n(3500),t=n(6568),a=n(6200);const d={},p="Responding To Disable Requests",c={id:"providers/responding-to-disable-requests",title:"Responding To Disable Requests",description:"<TOCInline",source:"@site/docs/providers/responding-to-disable-requests.mdx",sourceDirName:"providers",slug:"/providers/responding-to-disable-requests",permalink:"/providers/responding-to-disable-requests",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Responding To Enable Requests",permalink:"/providers/responding-to-enable-requests"},next:{title:"Responding To Sign Transactions Requests",permalink:"/providers/responding-to-sign-transactions-requests"}},l={},h=[{value:"Overview",id:"overview",level:2},{value:"Responding to an anonymous request",id:"responding-to-an-anonymous-request",level:2},{value:"Responding to a specific provider and network request",id:"responding-to-a-specific-provider-and-network-request",level:2},{value:"Responding to specific session IDs",id:"responding-to-specific-session-ids",level:2}];function v(e){const s={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h1,{id:"responding-to-disable-requests",children:"Responding To Disable Requests"}),"\n",(0,r.jsx)(a.c,{maxHeadingLevel:4,toc:h}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(s.p,{children:"Providers that implement a session for a client, a disable request can be called by a client that instructs the provider to remove the client's session."}),"\n",(0,r.jsx)(s.h2,{id:"responding-to-an-anonymous-request",children:"Responding to an anonymous request"}),"\n",(0,r.jsx)(s.p,{children:"For clients that have not specified a provider, it means the client would like to disable with all providers. Once our provider object has been initialized, we can simply listen to events and respond:"}),"\n",(0,r.jsxs)(o.c,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],children:[(0,r.jsx)(t.c,{value:"javascript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"// initialized provider\nprovider.onDisable(({ params }) => {\n  if (!params || !params.providerId) {\n    // ... remove all sessions\n\n    return {\n      genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n      genesisId: 'testnet-v1.0',\n      providerId: '02657eaf-be17-4efc-b0a4-19d654b2448e',\n    };\n  }\n});\n"})})}),(0,r.jsx)(t.c,{value:"typescript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:"import type { IAVMWebProviderCallbackOptions } from '@agoralabs-sh/avm-web-provider';\n\n// initialized provider\nprovider.onEnable(({ params }: IAVMWebProviderCallbackOptions) => {\n  if (!params || !params.providerId) {\n    // ... remove all sessions\n\n    return {\n      genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n      genesisId: 'testnet-v1.0',\n      providerId: '02657eaf-be17-4efc-b0a4-19d654b2448e',\n    };\n  }\n});\n"})})})]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"If no network or session IDs have been specified, you can assume all sessions for this client should be removed."})}),"\n",(0,r.jsx)(s.admonition,{type:"caution",children:(0,r.jsxs)(s.p,{children:["If this method is not supported, then a ",(0,r.jsx)(s.a,{href:"../../api-reference/errors#methodnotsupportederror",children:(0,r.jsx)(s.code,{children:"MethodNotSupportedError"})})," should be thrown."]})}),"\n",(0,r.jsx)(s.h2,{id:"responding-to-a-specific-provider-and-network-request",children:"Responding to a specific provider and network request"}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"disable"})," request allows the client to specify the provider and the network. This is denoted in the supplied ",(0,r.jsx)(s.code,{children:"params.providerId"})," and ",(0,r.jsx)(s.code,{children:"params.genesisHash"})," parameters. Providers with the matching ID should respond:"]}),"\n",(0,r.jsxs)(o.c,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],children:[(0,r.jsx)(t.c,{value:"javascript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const { ARC0027NetworkNotSupportedError } = require('@agoralabs-sh/avm-web-provider');\n\nconst genesisHash = 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=';\nconst providerId = '02657eaf-be17-4efc-b0a4-19d654b2448e';\n\n// initialized provider\nprovider.onDisable(({ params }) => {\n  if (!params || params.providerId === providerId) {\n    // if the genesis hash has been defined, it is recommended that you throw and error\n    if (param.genesisHash && param.genesisHash !== genesisHash) {\n      throw new ARC0027NetworkNotSupportedError({\n        genesisHashes: [param.genesisHash],\n        providerId,\n      });\n    }\n\n    // ... remove all sessions for the network\n\n    return {\n      genesisHash,\n      genesisId: 'testnet-v1.0',\n      providerId,\n    };\n  }\n});\n"})})}),(0,r.jsx)(t.c,{value:"typescript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:"import type { ARC0027NetworkNotSupportedError, IAVMWebProviderCallbackOptions } from '@agoralabs-sh/avm-web-provider';\n\nconst genesisHash = 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=';\nconst providerId: string = '02657eaf-be17-4efc-b0a4-19d654b2448e';\n\n// initialized provider\nprovider.onDisable(({ params }: IAVMWebProviderCallbackOptions) => {\n  if (!params || params.providerId === providerId) {\n    // if the genesis hash has been defined, it is recommended that you throw and error\n    if (param.genesisHash && param.genesisHash !== genesisHash) {\n      throw new ARC0027NetworkNotSupportedError({\n        genesisHashes: [param.genesisHash],\n        providerId,\n      });\n    }\n\n    // ... remove all sessions for the network\n\n    return {\n      genesisHash,\n      genesisId: 'testnet-v1.0',\n      providerId,\n    };\n  }\n});\n"})})})]}),"\n",(0,r.jsx)(s.admonition,{type:"caution",children:(0,r.jsxs)(s.p,{children:["If the network and the provider ID is specified, and the provider does not support the network, then a ",(0,r.jsx)(s.a,{href:"../../api-reference/errors#networknotsupportederror",children:(0,r.jsx)(s.code,{children:"NetworkNotSupportedError"})})," should be thrown."]})}),"\n",(0,r.jsx)(s.h2,{id:"responding-to-specific-session-ids",children:"Responding to specific session IDs"}),"\n",(0,r.jsx)(s.p,{children:"A requesting client can specify the particular session. This can be used instead of specifying the network, or if the provider supports multiple sessions."}),"\n",(0,r.jsxs)(o.c,{defaultValue:"javascript",values:[{label:"Javascript",value:"javascript"},{label:"TypeScript",value:"typescript"}],children:[(0,r.jsx)(t.c,{value:"javascript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:"const providerId = '02657eaf-be17-4efc-b0a4-19d654b2448e';\nconst sessionId = '2802dff6-930e-4f79-8f67-ba9d41e88cf8';\n\n// initialized provider\nprovider.onDisable(({ params }) => {\n  if (params && params.sessionIds.indexOf(sessionId) >= 0) {\n    // ... remove sessions specified in the session ids list\n\n    return {\n      genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n      genesisId: 'testnet-v1.0',\n      providerId,\n      sessionIds: [sessionId],\n    };\n  }\n});\n"})})}),(0,r.jsx)(t.c,{value:"typescript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-typescript",children:"import type { IAVMWebProviderCallbackOptions } from '@agoralabs-sh/avm-web-provider';\n\nconst providerId: string = '02657eaf-be17-4efc-b0a4-19d654b2448e';\nconst sessionId: string = '2802dff6-930e-4f79-8f67-ba9d41e88cf8';\n\n// initialized provider\nprovider.onDisable(({ params }: IAVMWebProviderCallbackOptions) => {\n  if (params && params.sessionIds.includes(sessionId)) {\n    // ... remove sessions specified in the session ids list\n\n    return {\n      genesisHash: 'SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=',\n      genesisId: 'testnet-v1.0',\n      providerId,\n      sessionIds: [sessionId],\n    };\n  }\n});\n"})})})]}),"\n",(0,r.jsx)(s.admonition,{type:"note",children:(0,r.jsx)(s.p,{children:"It is recommended that when removing specific session IDs, only return the removed session IDs in the result."})})]})}function u(e={}){const{wrapper:s}={...(0,i.M)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(v,{...e})}):v(e)}}}]);